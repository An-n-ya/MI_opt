function [X,MI] = MM_SQUAREM(para, mode)
    %% Initialization
    global m LT LR Q P sigma constant P_max SIGMA
    m = para.m;
    LT = para.LT;
    LR = para.LR;
    Q = para.Q;
    P = para.P;
    sigma = para.sigma;
    SIGMA = para.SIGMA;
    inv_SIG
    constant = para.constant;
    P_max = para.P_max;

    X0 = para.X0;
    x0 = para.x0;
    para.mode = 1; %single loop
    
    
    %% SQUAREM Acceleration
    t = 1;
    epsilon = 1e-4;
    delta = 1;
    X = X0;
    x = x0;
    MI(t) = real(log(det(sigma^(-2)*X'*SIGMA*X+eye(LR*Q))));
    while abs(delta) > epsilon
        para.X0 = X;
        para.x0 = x;
        [~,~,x1] = MM_MI(para,mode);
        X1 = kron(eye(Q*LR),x1); 
        para.X0 = X1;
        para.x0 = x1;
        [~,~,x2] = MM_MI(para,mode);
        q = x1 - x;
        v = x2 - x1 - q;
        cal_MI(x1)
        cal_MI(x2)
        alpha =  -norm(q)/norm(v);
        x_new =  proj((x - 2 * alpha * q + alpha^2 * v),mode);
        X_new = kron(eye(Q*LR),x_new);
        cal_MI(x_new)
        while cal_MI(x_new) < cal_MI(x) 
            cal_MI(x_new)
            alpha = (alpha - 1) / 2;
            x_new =  proj(x - 2 * alpha * q + alpha^2 * v,mode);
            X_new = kron(eye(Q*LR),x_new);
        end
        x = x_new;
        X = kron(eye(Q*LR),x_new); 
        MI(t+1) = real(log(det(sigma^(-2)*X'*SIGMA*X+eye(LR*Q))));
        delta = MI(t+1) - MI(t);
        t = t+1;
    end
    plot(MI)
end

function x_proj = proj(xx,mode) 
    global LT LR Q P sigma constant P_max SIGMA inv_SIGMA
    if strcmp(mode, 'PC')
        X = kron(eye(Q*LR),xx); 
        V_LHS = eye(Q*LR) + X' * sigma^(-2) * SIGMA * X;
        V_RHS = X' / (sigma^2 * inv_SIGMA + X * X');
        V = V_LHS * V_RHS;
        U = V' * V_RHS;
        %vectorize V and extract W
        v = zeros(P*LT,1);
        W = zeros(P*LT);
        for i = 1:Q*LR
            ind_begin = (i-1)*LT*P+1;
            ind_end = i*LT*P;
            v = v + V(i,ind_begin:ind_end)';
            W = W + U(ind_begin:ind_end,ind_begin:ind_end);
        end
        n = LT*P;
        W(eye(n)==1) = real(W(eye(n)==1));
        l = chol(W);

        cvx_begin quiet
            variable x(n) complex
            maximize( 2*real(v'*x) - x'*(l'*l)*x )
            subject to
                x'*x <= P_max
        cvx_end
        x_proj = x;
    elseif strcmp(mode, 'CMC')
        x_proj = constant * exp(1j * angle(xx));
    end
end

function mi = cal_MI(x)
    global Q sigma SIGMA LR
    X = kron(eye(Q*LR),x);
    mi = real(log(det(sigma^(-2)*X'*SIGMA*X+eye(LR*Q))));
end
